{"version":3,"sources":["components/AddUser.jsx","components/EditUser.jsx","components/User.jsx","components/Users.jsx","App.js","serviceWorker.js","index.js"],"names":["AddUser","useState","name","bio","formState","setFormState","useContext","UsersContext","setUsers","users","onChange","e","target","value","className","onSubmit","preventDefault","axios","post","then","data","catch","err","console","log","type","placeholder","EditUser","user","toggleEditing","put","id","map","onClick","User","deleteUser","editing","setEditing","Users","delete","deletedUser","filter","Array","isArray","key","createContext","App","useEffect","get","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8af36a82.chunk.js","sourcesContent":["import React, {useState, useContext} from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport {UsersContext} from \"../App\";\r\n\r\nconst AddUser = () => {\r\n    const [formState, setFormState] = useState({\r\n        name: \"\",\r\n        bio: \"\"\r\n    });\r\n\r\n    const {setUsers, users} = useContext(UsersContext)\r\n\r\n    const onChange = e => {\r\n        setFormState({\r\n            ...formState,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    const onSubmit = e =>{\r\n        e.preventDefault();\r\n        axios.post(\"http://localhost:5000/api/users\", formState).then(({data})=>{\r\n            setUsers([...users, data]);\r\n        }).catch(err=>{\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <form className=\"add-user\" onSubmit={onSubmit}>\r\n            <h1>Add a User</h1>\r\n            <input onChange={onChange} value={formState.name} type=\"text\" name=\"name\" placeholder=\"name\"/>\r\n            <input onChange={onChange} value={formState.bio} type=\"text\" name=\"bio\" placeholder=\"bio\"/>\r\n            <button>Add</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddUser;","import React, {useState, useContext} from 'react';\r\nimport axios from \"axios\";\r\n\r\nimport {UsersContext} from \"../App\";\r\n\r\nconst EditUser = ({user, toggleEditing}) => {\r\n    const [formState, setFormState] = useState({\r\n        name: user.name,\r\n        bio: user.bio\r\n    })\r\n\r\n    const {setUsers, users} = useContext(UsersContext);\r\n\r\n    const onChange = e => {\r\n        setFormState({\r\n            ...formState,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit = e =>{\r\n        e.preventDefault();\r\n        axios.put(`http://localhost:5000/api/users/${user.id}`, formState).then(({data})=>{\r\n            setUsers(users.map(user=>{\r\n                if(user.id === data.id){\r\n                    return data;\r\n                }\r\n                return user;\r\n            }));\r\n            toggleEditing();\r\n        }).catch(err=>{\r\n            console.log(err);\r\n        });\r\n    }\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"user\">\r\n            <input onChange={onChange} value={formState.name} type=\"text\" name=\"name\"/>\r\n            <input onChange={onChange} value={formState.bio} type=\"text\" name=\"bio\"/>\r\n            <button onClick={toggleEditing}>Cancel</button>\r\n            <button>Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default EditUser;","import React, {useState} from 'react';\r\n\r\nimport EditUser from \"./EditUser\";\r\n\r\nconst User = ({user, deleteUser}) => {\r\n    const [editing, setEditing] = useState(false);\r\n\r\n    const toggleEditing = () => {\r\n        setEditing(!editing);\r\n    }\r\n    if(!editing){\r\n        return (\r\n            <div className=\"user\">\r\n                <h3>{user.name}</h3>\r\n                <p>{user.bio}</p>\r\n                <button onClick={toggleEditing}>Edit</button>\r\n                <button onClick={()=> deleteUser(user.id)}>Delete</button>\r\n            </div>\r\n        )\r\n    }else if(editing){\r\n        return (\r\n            <EditUser toggleEditing={toggleEditing} user={user}/>\r\n        )\r\n    }\r\n};\r\n\r\nexport default User;","import React, {useContext} from 'react';\r\nimport axios from \"axios\";\r\nimport {UsersContext} from \"../App\";\r\n\r\nimport User from \"./User\";\r\n\r\nconst Users = () => {\r\n    const {users, setUsers} = useContext(UsersContext);\r\n    const deleteUser = (id) => {\r\n        axios.delete(`http://localhost:5000/api/users/${id}`).then(({data})=>{\r\n            const deletedUser = data;\r\n            setUsers(users.filter(user=> user.id !== deletedUser.id));\r\n        }).catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"users\">\r\n            {Array.isArray(users) === true && !users[0] &&\r\n                <div>No users found</div> \r\n            }\r\n            {Array.isArray(users) === true && users.map(user=>{\r\n                return(\r\n                    <User deleteUser={deleteUser} key={user.id} user={user}/>\r\n                )\r\n             })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;","import React, {useEffect, useState, createContext} from 'react';\nimport axios from \"axios\";\n\nimport AddUser from \"./components/AddUser\";\nimport Users from \"./components/Users\";\n\nexport const UsersContext = createContext();\n\nfunction App() {\n  const [users, setUsers] = useState();\n  useEffect(()=>{\n    setUsers(\"loading\");\n    axios.get(\"http://localhost:5000/api/users\").then(({data})=>{\n      setUsers(data);\n    }).catch(err=>{\n      console.log(err);\n    })\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>User List</h1>\n      </header>\n      <UsersContext.Provider value={{users: users, setUsers: setUsers}}>\n        <AddUser/>\n        <div className=\"users\">\n          {users === \"loading\" &&\n              <div>loading users...</div>\n          }\n          <Users/>\n        </div>\n      </UsersContext.Provider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}